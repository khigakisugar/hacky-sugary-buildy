#!/usr/bin/php
<?php

$HOMEROOT = getenv("HOME");
$HOME = getcwd();

function theMain() {

    global $HOMEROOT, $HOME;
    // get the default values from the ini file
    error_log("pulling defaults from ini file");
    $defaultsfile = "$HOME/sugarbuildconfig.ini";
    $keyfile = "$HOME/license.ini";
    $key = '';
    list($defaultversion, $defaultflavor, $dbpword) = getDefaults($defaultsfile);
    if (file_exists($keyfile)) {
        $key = parse_ini_file($keyfile)['key'];
    }

    // get the user input
    list($version, $flavor, $sidecar, $newMin, $upDeps, $bounceApache, $demoData) = getOptions($defaultversion, $defaultflavor);
    $safeVersion = str_replace(".", "_", $version);
    $database = "sugar_$safeVersion" . "_$flavor";
    $dumpfile = "$HOME/$database.sql";

    // update ini file
    error_log("updating defaults: version=$version, flavor=$flavor, password=$dbpword");
    setDefaults($defaultsfile, $version, $flavor, $dbpword);

    // Build the config from template
    updateConfigSi($flavor, $safeVersion, $demoData, $key);

    // update sidecar if needed
    if ($sidecar) {
        updateSubmodules();
    }

    // rebuild the minified sidecar
    if ($newMin) {
        run('./construct -u', "$HOMEROOT/Mango/sugarcrm/sidecar");
    }

    // bounce apache
    if ($bounceApache) {
        run('sudo /usr/sbin/apachectl restart');
    }

    // do a composer or npm update if needed
    if ($upDeps) {
        updateDependencies($flavor, $version);
    }

    // Run the build
    runBuild($version, $flavor, $safeVersion);

    // Open a browser window
    run("/usr/bin/open -a '/Applications/Google Chrome.app' --new --args '-incognito' 'http://localhost/$safeVersion/$flavor/sugarcrm'");

    // Set permissions on grunt-cli
    run("chmod u+x $HOMEROOT/Sites/$safeVersion/$flavor/sugarcrm/sidecar/node_modules/grunt-cli/bin/grunt");
    run("chmod u+x $HOMEROOT/Sites/$safeVersion/$flavor/sugarcrm/node_modules/grunt-cli/bin/grunt");

    // Run tests
    run("./node_modules/grunt-cli/bin/grunt karma:ci", "$HOMEROOT/Sites/$safeVersion/$flavor/sugarcrm/sidecar");
    run("./node_modules/grunt-cli/bin/grunt karma:ci", "$HOMEROOT/Sites/$safeVersion/$flavor/sugarcrm");
}

// run composer and npm updates in the install
function updateDependencies($flavor, $version) {
    global $HOMEROOT;
    $loc = "$HOMEROOT/Mango/sugarcrm";
    run("composer install", $loc);
    run("npm install", $loc);
    run("npm install", $loc . "/sidecar");
}

// version, flavor, sidecar, demoData, newDump, loadDump
function getOptions($defaultversion, $defaultflavor) {
    $options = getopt('h', array("help", "full", "quick", "interactive"));
    if (array_key_exists('help', $options) || array_key_exists('h', $options)) {
        error_log(PHP_EOL . "Usage: build [-hfq] [--help] [--full] [--quick]" . PHP_EOL .
                "-h, --help\t\tDisplay this help" . PHP_EOL .
                "-i, --interactive\tRun in manual mode, which prompts for user input. DO THIS FIRST" . PHP_EOL .
                "-f, --full\t\tRun in full mode, after defaults have been set in manual mode" . PHP_EOL .
                "\t\t\tDefault Version, Default Flavor, Rebuild Sidecar, Build Demo Data, Store new MySQL dump" . PHP_EOL .
                "\t\t\tTakes precedence over -q/--quick" . PHP_EOL .
                "-q, --quick\t\tRun in quick mode, after defaults have been set in manual mode" . PHP_EOL .
                "\t\t\tDefault Version, Default Flavor, Skip Sidecar, Skip Demo Data, Retrive data from MySQL dump" . PHP_EOL . PHP_EOL .
                "When in doubt, run in the -i/--interactive mode" . PHP_EOL . PHP_EOL .
                "You MUST have a config_si.php file in your current working directory." . PHP_EOL
        );
        exit(0);
    } else {
        error_log("prompting user for information");
        return getAllUserInput($defaultversion, $defaultflavor);
    }
}

function run($cmd, $dir=NULL, $printOut=true) {
    if ($dir) {
        error_log("%chdir: `$dir`");
        chdir($dir);
    }
    if ($printOut) {
        $cmd = $cmd . ' 2>&1';
    }
    error_log("!running: `$cmd`");
    $return = shell_exec("$cmd");
    if ($return) {
        error_log($return);
    }
}

function promptUser($prompt, $allowedValues=NULL, $default=NULL) {
    // loop until a valid answer is provided
    while (true) {
        $userValue = strtolower(readline($prompt));
        // if answer is an empty string and default is specified, return default
        if (($userValue == "") && $default){
            error_log("defaulting to $default");
            return $default;
        }
        // check answer against allowed values.
        if ($allowedValues) {
            if (in_array($userValue, $allowedValues)) {
                // valid answer given, return answer
                return $userValue;
            } else {
                // invalid answer given, prompt again
                $validAnswer = implode(", ", $allowedValues);
                error_log("$userValue is not a valid answer. Please answer [$validAnswer]");
                continue;
            }
        } else {
            // all answers valid
            return $userValue;
        }
    }
}

function convertYNToBoolean($yn) {
    if (strtolower($yn) == "y") {
        return true;
    } elseif (strtolower($yn) == "n") {
        return false;
    } else {
        throw new Exception("convertYNToBoolean Error: value passed is not y/n");
    }
}

function getDefaults($defaultsfile) {
    $defaults = array('version' => '', 'flavor' => '',);
    if (file_exists($defaultsfile)) {
        $defaults = parse_ini_file($defaultsfile);
    }
    $defaultversion = $defaults['version'];
    $defaultflavor = $defaults['flavor'];
    $dbpword = $defaults['dbpword'];
    return array($defaultversion, $defaultflavor, $dbpword);
}

function getAllUserInput($defaultversion=NULL, $defaultflavor=NULL) {
    $FLAVORARRAY = array('pro', 'ent', 'ult');
    $YNARRAY = array('y', 'n');

    $version = promptUser("Version: [$defaultversion] ", NULL, $defaultversion);
    $flavor = promptUser("Flavor (pro, ent, ult): [$defaultflavor] ", $FLAVORARRAY, $defaultflavor);
    $sidecar = convertYNToBoolean(promptUser("Fetch new sidecar y/[n]? ", $YNARRAY, 'n'));
    $newMin = convertYNToBoolean(promptUser("Build new minified sidecar y/[n]? ", $YNARRAY, 'n'));
    $upDeps = convertYNToBoolean(promptUser("Update dependencies y/[n]? ", $YNARRAY, 'n'));
    $bounceApache = convertYNToBoolean(promptUser("restart apache y/[n]? ", $YNARRAY, 'n'));
    $demoData = convertYNToBoolean(promptUser("Build new Demo data y/[n]? ", $YNARRAY, 'n'));

    return array($version, $flavor, $sidecar, $newMin, $upDeps, $bounceApache, $demoData);
}

function setDefaults($defaultsfile, $version, $flavor, $dbpword) {
    $defaultsrewrite = fopen($defaultsfile, 'w');
    fwrite($defaultsrewrite, '[sugar]'. PHP_EOL);
    fwrite($defaultsrewrite, "version=$version" . PHP_EOL);
    fwrite($defaultsrewrite, "flavor=$flavor" . PHP_EOL);
    fwrite($defaultsrewrite, "dbpword=$dbpword" . PHP_EOL);
    fclose($defaultsrewrite);
}

function updateConfigSi($flavor, $safeVersion, $demoData, $key) {
    global $HOME, $HOMEROOT;
    $configtemplate = "$HOME/config_si.php";
    $configdestination = "$HOMEROOT/Mango/sugarcrm/config_si.php";
    error_log("updating $configdestination");
    if (file_exists($configtemplate)) {
        $readhandle = fopen($configtemplate, 'r');
    } else {
        $readhandle = false;
    }
    $writehandle = fopen($configdestination, 'w');
    if ($readhandle) {
        while ($line=fgets($readhandle)) {
            if (!$line) {
                break;
            }
            $line = str_replace('<FLAV>', $flavor, $line);
            $line = str_replace('<VERS>', $safeVersion, $line);
            $line = str_replace('<DEMO>', $demoData ? "true" : "false", $line);
            $line = str_replace('<KEY>', $key, $line);
            fwrite($writehandle, $line);
        }
        fclose($readhandle);
        fclose($writehandle);
    } else {
        fclose($writehandle);
        die("config template missing from $configTemplate");
    }
}

function updateSubmodules() {
    global $HOMEROOT;
    run("git submodule update", "$HOMEROOT/Mango");
}

function runBuild($version, $flavor, $safeVersion) {
    global $HOME, $HOMEROOT;
    $buildscript = "/usr/bin/php $HOMEROOT/Mango/build/rome/build.php --ver=$version --flav=$flavor --dir=$HOMEROOT/Mango/sugarcrm --build_dir=$HOMEROOT/Sites/$safeVersion --latin=1 --clean --cleanCache";
    run("$buildscript", "$HOMEROOT/Mango/build/rome");
    run("curl -s 'http://localhost/$safeVersion/$flavor/sugarcrm/install.php?goto=SilentInstall&cli=true'");
}

theMain();
?>
